var PlaySources; (function (a) { a["Le"] = "Le"; a["Polyv"] = "Polyv"; a["Qiniu"] = "Qiniu" })(PlaySources || (PlaySources = {})); var _etlplayerdomain = "//testresource.etledu.com/"; window.document.write('<script type="text/javascript" src="//yuntv.letv.com/player/vod/bcloud.js"><\/script>'); window.document.write('<link href="' + _etlplayerdomain + 'Scripts/video-js-5.20.3/skin/video-js.css" rel= "stylesheet" />'); var ie = navigator.userAgent.toLowerCase().match(/msie ([\d.]+)/); if (ie != null && (ie[1].indexOf("8") >= 0 || ie[1].indexOf("9") >= 0)) { window.document.write('<script type="text/javascript" src="' + _etlplayerdomain + 'Scripts/jquery.xdomainrequest.min.js"><\/script>') } if (ie != null && ie[1].indexOf("8") >= 0) { window.document.write('<script type="text/javascript" src="' + _etlplayerdomain + 'Scripts/video-js-5.20.3/ie8/videojs-ie8.min.js"><\/script>'); window.document.write('<script type="text/javascript" src="' + _etlplayerdomain + 'Scripts/video-js-5.20.3/video.min.js"><\/script>') } else { if (ie != null && ie[1].indexOf("9") >= 0) { window.document.write('<script type="text/javascript" src="' + _etlplayerdomain + 'Scripts/video-js-5.20.3/video.min.js"><\/script>') } else { window.document.write('<script type="text/javascript" src="' + _etlplayerdomain + 'Scripts/video-js-5.20.3/video.js"><\/script>'); window.document.write('<script type="text/javascript" src="' + _etlplayerdomain + 'Scripts/video-js-5.20.3/videojs-contrib-hls.min.js"><\/script>') } } window.document.write('<script type="text/javascript" src="' + _etlplayerdomain + 'Scripts/video-js-5.20.3/lang/zh-CN.js"><\/script>'); $(function () { var a = navigator.userAgent.toLowerCase().match(/msie ([\d.]+)/); if (a != null && (a[1].indexOf("8") >= 0 || a[1].indexOf("9") >= 0)) { videojs.options.flash.swf = _etlplayerdomain + "Scripts/video-js-5.20.3/video-js-ie89.swf" } else { videojs.options.flash.swf = _etlplayerdomain + "Scripts/video-js-5.20.3/video-js.swf" } videojs.getComponent("SeekBar").prototype.handleMouseMove = function (e) { var f = $(e.target).closest(".video-js")[0].id; var b = videojs(f); var d = b.controlBar.progressControl.seekBar; if (!b.options_.isSeek) { return } var c = d.calculateDistance(e) * d.player_.duration(); if (c === d.player_.duration()) { c = c - 0.1 } d.player_.currentTime(c) } }); var VideojsPlayer = (function () { function a(d, c, b) { this._id = d + "_etlvideo"; if ($("#" + d).find("#" + this._id).length == 0) { $("#" + d).html('<video id="' + this._id + '"  class="video-js vjs-big-play-centered" ></video>') } this._ops = c; this._player = videojs(this._id, c, function () { $("#" + d).find("video").on("contextmenu", function () { return false }); if (b) { b() } }) } a.prototype.play = function () { return this._player.play() }; a.prototype.pause = function () { return this._player.pause() }; a.prototype.currentTime = function (b) { return this._player.currentTime(b) }; a.prototype.controls = function (b) { return this._player.controls(b) }; a.prototype.paused = function () { return this._player.paused() }; a.prototype.ready = function (b) { return this._player.ready(b) }; a.prototype.on = function (b, d) { var c = this; if (b == "seek") { c._player.on("seeking", function (f) { c._player.trigger("seek", c.currentTime()) }) } c._player.on(b, d) }; a.prototype.off = function (b, c) { this._player.off(b, c) }; return a }()); var LetvPlayer = (function () { function a(e, c, b) { var d = this; this._isStartPlay = false; this._isFlash = false; this._id = e; this._ops = c; this._player = new CloudVodPlayer(); this._player.init(c, e); if (b) { $("#" + this._id).on("ready", b) } $("#" + this._id).on("firstplay", function () { d._isStartPlay = true; var f = $("#" + e); d._isFlash = f.find("video").length == 0; if (d._ops.isSeek == "0") { f.find("div").each(function (h, j) { if (j.id.indexOf("playIngBar") >= 0) { var g = $("<div></div>"); g.attr("calss", $(j).attr("class")); g.css({ "z-index": "100", "cursor": $(j).css("cursor"), "height": $(j).css("height"), "width": $(j).css("width"), "float": $(j).css("float"), "position": $(j).css("position"), "top": $(j).css("top"), "left": $(j).css("left") }); $("#" + d._id).on("fullscreenchange", function () { g.css({ "width": parseInt($(j).css("width")) + 200, "left": $(j).css("left") }); setTimeout(function () { g.css({ "width": parseInt($(j).css("width")), "left": $(j).css("left") }) }, 1000) }); $(j).after(g) } if (j.id.indexOf("playBarIco") >= 0) { $(j).remove() } }) } }) } a.prototype.play = function () { if (this._ops["autoplay"] == 0 && !this._isStartPlay) { this._player.sdk.startUp() } else { this._player.sdk.resumeVideo(); if (this._isFlash) { $("#" + this._id).trigger("play") } } return this }; a.prototype.pause = function () { this._player.sdk.pauseVideo(); if (this._isFlash) { $("#" + this._id).trigger("pause") } return this }; a.prototype.currentTime = function (b) { if (b) { this._player.sdk.seekTo(b); return this } return this._player.sdk.getVideoTime() }; a.prototype.controls = function (b) { }; a.prototype.paused = function () { return false }; a.prototype.ready = function (b) { $("#" + this._id).on("ready", b); return this }; a.prototype.on = function (b, c) { $("#" + this._id).on(b, c) }; a.prototype.off = function (b, c) { }; return a }()); var EtlPlayer = (function () {
    function a(g, d, c) {
        this._ready = []; if (g == null) { return } var b = { vcode: "", techOrder: ["html5", "flash"], playSources: PlaySources.Le, autoplay: false, controls: true, height: 360, width: 640, playerOps: null }; d = $.extend({}, b, d); $("#" + g).height(d.height);
        $("#" + g).width(d.width); this._ops = d; var e = this; var f = { code: d.vcode }; if (d.playerOps != undefined && d.playerOps != null && d.playerOps.code != undefined && d.playerOps.code != null) { f.playerOpsCode = d.playerOps.code } $.ajax({ url: _etlplayerdomain + "EtlPlayer/GetVideoByCode", data: f, type: "GET", dataType: "json", success: function (l) { d.playSources = l.playSources; var j = { leuu: l.leuu, levu: l.levu, src: l.src }; switch (d.playSources) { case PlaySources.Le: var n = e.toLeOps(g, d, j); e._player = new LetvPlayer(g, n, c); break; case PlaySources.Polyv: var h = e.toPolyvOps(d, j); e._player = new VideojsPlayer(g, h, c); break; case PlaySources.Qiniu: e._player = new VideojsPlayer(g, d, c); break; default: e._player = new VideojsPlayer(g, d, c); break } if (l.isFace) { var m = function () { window["$etlFace"].ops = { face: l.face, player: e._player, vcode: d.vcode }; window["$etlFace"].ops.face.$faceCode = d.playerOps.code; window["$etlFace"].ops.face.$faceUrl = d.playerOps.faceUrl; if (window["$etlFace"].show) { window["$etlFace"].show() } window["$etlFace"]._run = { isPlay: false, takeTime: l.face.taktTime * 60, playTime: 0 }; if (window["$etlFace"].faceInterval) { clearInterval(window["$etlFace"].faceInterval) } window["$etlFace"].faceInterval = setInterval(function () { if (!window["$etlFace"]._run.isPlay) { return } if (window["$etlFace"]._run.playTime > 0 && window["$etlFace"]._run.playTime % window["$etlFace"]._run.takeTime == 0 && window["$etlFace"].isLoad) { try { e._player.pause() } catch (i) { clearInterval(window["$etlFace"].faceInterval); return } window["$etlFace"].show() } window["$etlFace"]._run.playTime++ }, 1000); e._player.on("play", function () { window["$etlFace"]._run.isPlay = true }); e._player.on("pause", function () { window["$etlFace"]._run.isPlay = false }); if (d.playerOps.beforeFaceCompare && typeof (d.playerOps.beforeFaceCompare) == "function") { window["$etlFace"].beforeFaceCompare = d.playerOps.beforeFaceCompare } else { window["$etlFace"].beforeFaceCompare = function () { } } if (d.playerOps.afterFaceCompare && typeof (d.playerOps.afterFaceCompare) == "function") { window["$etlFace"].afterFaceCompare = d.playerOps.afterFaceCompare } else { window["$etlFace"].afterFaceCompare = function () { } } }; if (!window["$etlFace"]) { $.ajax({ dataType: "script", url: _etlplayerdomain + "/Scripts/facialRecognition/facialRecognition.js", cache: true, success: function () { m() } }) } else { m() } } for (var k = 0; k < e._ready.length; k++) { e._player.ready(e._ready[k]) } e._ready = [] } })
    } a.prototype.leEvent = function (d, b) { var c = $("#" + d); window[b] = function (f, e) { if (f == "playerInit") { c.trigger("ready", [e]) } else { if (f == "videoAuthValid") { } else { if (f == "videoStartReady") { } else { if (f == "videoStart") { c.trigger("firstplay", [e]); c.trigger("play", [e]) } else { if (f == "videoPause") { c.trigger("pause", [e]) } else { if (f == "videoResume") { c.trigger("play", [e]) } else { if (f == "videoEmpty") { } else { if (f == "videoFull") { } else { if (f == "videoStop") { c.trigger("ended", [e]) } else { if (f == "videoSeek" || f == "seekTo") { c.trigger("seek", [e]) } else { if (f == "errorInConfig") { } else { if (f == "errorInLoadPlugins") { } else { if (f == "errorInKernel") { } else { if (f == "fullscreen") { c.trigger("fullscreenchange", [e]) } } } } } } } } } } } } } } } }; a.prototype.toLeOps = function (f, c, e) { var d = "_etlletvcall_" + f; this.leEvent(f, d); var b = { uu: e.leuu, vu: e.levu, callbackJs: d, autoSize: 0, changeParent: 1, definition: "0", share: "0", extend: "0", isSeek: "1" }; b["auto_play"] = 0; b["autoplay"] = 0; if (c.autoplay) { b["auto_play"] = 1; b["autoplay"] = 1 } b.skinnable = 1; if (c.controls == false) { b.skinnable = 0 } if (c.isSeek == false) { b.isSeek = "0" } return b }; a.prototype.toPolyvOps = function (c, g) { var f = "application/x-mpegURL"; var e = navigator.userAgent.toLowerCase().match(/msie ([\d.]+)/); var d = e != null && (e[1].indexOf("8") >= 0 || e[1].indexOf("9") >= 0); if (d) { f = "video/mp4" } var b = { sources: [{ src: g.src, type: f }], language: "zh-CN", isSeek: true }; b = $.extend({}, b, c); if (d || (e != null && e[1].indexOf("11") >= 0)) { b = $.extend({}, b, { techOrder: ["flash"] }) } return b }; a.prototype.play = function () { return this._player.play() }; a.prototype.pause = function () { return this._player.pause() }; a.prototype.paused = function () { return this._player.paused() }; a.prototype.currentTime = function (b) { return this._player.currentTime(b) }; a.prototype.controls = function (b) { return this._player.controls(b) }; a.prototype.ready = function (b) { this._ready.push(b); return this }; a.prototype.on = function (b, d) { var c = this; if (this._player) { this._player.on(b, d) } else { this._ready.push(function () { c._player.on(b, d) }) } }; a.prototype.off = function (b, d) { var c = this; if (this._player) { this._player.off(b, d) } else { this._ready.push(function () { c._player.off(b, d) }) } }; return a
}());